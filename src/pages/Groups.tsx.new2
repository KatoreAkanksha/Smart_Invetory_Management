import { useState, useEffect } from "react";
import { useLanguage } from "@/contexts/LanguageContext";
import Navbar from "@/components/Navbar";
import { GroupCard } from "@/components/GroupCard";
import CreateGroupModal from "@/components/CreateGroupModal";
import SettlementModal from "@/components/SettlementModal";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Plus,
  Search,
  Filter,
  CheckCircle,
  Clock,
  AlertCircle,
  Users,
  CalendarDays,
  DollarSign,
  Share2,
  MessageSquare,
  SendHorizonal,
  Wallet,
  Send,
} from "lucide-react";
import { v4 as uuidv4 } from "uuid";
import { toast } from "sonner";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { PaymentInterface } from "@/components/PaymentInterface";
import { GroupExpense } from "@/types/payment";
import type { Group, GroupMember, CreateGroupInput } from "@/types/group";
import { useNotification } from "@/contexts/NotificationContext";

// Mock data for demonstration - expanded with more groups
const mockGroups: Group[] = [
  {
    id: "1",
    name: "Weekend Trip to Mountains",
    description: "Cabin rental and activities",
    totalAmount: 12500,
    date: "2023-05-25",
    members: [
      {
        id: "m1",
        name: "Alex",
        paid: true,
        amount: 3125,
      },
      {
        id: "m2",
        name: "Jordan",
        paid: true,
        amount: 3125,
      },
      {
        id: "m3",
        name: "Taylor",
        paid: false,
        amount: 3125,
      },
      {
        id: "m4",
        name: "Morgan",
        paid: false,
        amount: 3125,
      },
    ],
    status: "pending",
    category: "Trip",
  },
  {
    id: "2",
    name: "Dinner at Italian Restaurant",
    totalAmount: 4800,
    date: "2023-06-12",
    members: [
      {
        id: "m1",
        name: "Alex",
        paid: true,
        amount: 1600,
      },
      {
        id: "m2",
        name: "Riley",
        paid: true,
        amount: 1600,
      },
      {
        id: "m3",
        name: "Casey",
        paid: true,
        amount: 1600,
      },
    ],
    status: "settled",
    category: "Food",
  },
  {
    id: "3",
    name: "Monthly Apartment Expenses",
    description: "Utilities, internet, and cleaning",
    totalAmount: 8500,
    date: "2023-06-01",
    members: [
      {
        id: "m1",
        name: "Alex",
        paid: true,
        amount: 2833,
      },
      {
        id: "m2",
        name: "Jordan",
        paid: false,
        amount: 2833,
      },
      {
        id: "m3",
        name: "Taylor",
        paid: false,
        amount: 2834,
      },
    ],
    status: "overdue",
    category: "Housing",
  },
];

const Groups = () => {
  const { t } = useLanguage();
  const { addNotification } = useNotification();
  const [groups, setGroups] = useState<Group[]>(mockGroups);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedStatus, setSelectedStatus] = useState<
    "all" | "settled" | "pending" | "overdue"
  >("all");
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isSettlementModalOpen, setIsSettlementModalOpen] = useState(false);
  const [selectedGroup, setSelectedGroup] = useState<Group | null>(null);

  // Simulate loading data
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  // Filter groups based on search query and selected status
  const filteredGroups = groups.filter((group) => {
    const matchesSearch =
      group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (group.description &&
        group.description.toLowerCase().includes(searchQuery.toLowerCase()));

    const matchesStatus =
      selectedStatus === "all" || group.status === selectedStatus;

    return matchesSearch && matchesStatus;
  });

  const handleCreateGroup = (data: CreateGroupInput) => {
    const newGroup: Group = {
      id: uuidv4(),
      name: data.name,
      description: data.description,
      totalAmount: 0,
      date: new Date().toISOString().split("T")[0],
      members: data.members.map((member) => ({
        id: member.id || uuidv4(),
        name: member.name,
        paid: false,
        amount: 0,
      })),
      status: "pending",
      category: data.category || "Other",
    };

    setGroups([newGroup, ...groups]);
    setIsCreateModalOpen(false);
    toast.success(t("Group created successfully!"));
    
    // Show notification
    addNotification({
      type: "success",
      title: t("Group Created"),
      message: t("Your new group has been created successfully."),
    });
  };

  const handleOpenSettlement = (group: Group) => {
    setSelectedGroup(group);
    setIsSettlementModalOpen(true);
  };

  const handleSettlePayment = (
    groupId: string,
    memberId: string,
    amount: number
  ) => {
    // Update the group with the settled payment
    const updatedGroups = groups.map((group) => {
      if (group.id === groupId) {
        const updatedMembers = group.members.map((member) => {
          if (member.id === memberId) {
            return { ...member, paid: true };
          }
          return member;
        });

        // Check if all members have paid
        const allPaid = updatedMembers.every((member) => member.paid);
        
        return {
          ...group,
          members: updatedMembers,
          status: allPaid ? "settled" : group.status,
        };
      }
      return group;
    });

    // Update state and close modal
    setGroups(updatedGroups);
    setIsSettlementModalOpen(false);

    // Show success notification
    addNotification({
      type: "success",
      title: t("Payment Settled"),
      message: t("The payment has been marked as settled."),
    });
  };

  return (
    <div className="min-h-screen bg-background">
      <Navbar />

      <main className="pt-2 pb-16 px-4 sm:px-6 lg:px-8">
        <div className="container mx-auto max-w-7xl">
          <div className="flex items-center justify-between mb-6">
            <h1 className="text-3xl font-bold">{t("Groups")}</h1>
            <Button onClick={() => setIsCreateModalOpen(true)} className="gap-1">
              <Plus className="h-4 w-4" />
              {t("Create Group")}
            </Button>
          </div>

          <div className="grid gap-6">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder={t("Search groups...")}
                  className="pl-8"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>
              <div className="flex gap-2">
                <Tabs
                  value={selectedStatus}
                  onValueChange={(value) =>
                    setSelectedStatus(
                      value as "all" | "settled" | "pending" | "overdue"
                    )
                  }
                  className="w-full md:w-auto"
                >
                  <TabsList className="grid grid-cols-4 w-full">
                    <TabsTrigger value="all">{t("All")}</TabsTrigger>
                    <TabsTrigger value="settled">
                      <CheckCircle className="h-3 w-3 mr-1" />
                      {t("Settled")}
                    </TabsTrigger>
                    <TabsTrigger value="pending">
                      <Clock className="h-3 w-3 mr-1" />
                      {t("Pending")}
                    </TabsTrigger>
                    <TabsTrigger value="overdue">
                      <AlertCircle className="h-3 w-3 mr-1" />
                      {t("Overdue")}
                    </TabsTrigger>
                  </TabsList>
                </Tabs>
              </div>
            </div>

            {isLoading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {[1, 2, 3].map((i) => (
                  <div
                    key={i}
                    className="border rounded-lg p-6 shadow-sm animate-pulse"
                  >
                    <div className="h-6 bg-muted rounded mb-4 w-3/4"></div>
                    <div className="h-4 bg-muted rounded mb-2 w-1/2"></div>
                    <div className="h-4 bg-muted rounded mb-4 w-1/3"></div>
                    <div className="h-8 bg-muted rounded mb-4 w-full"></div>
                    <div className="flex justify-between items-center">
                      <div className="h-6 bg-muted rounded w-1/4"></div>
                      <div className="h-6 bg-muted rounded w-1/4"></div>
                    </div>
                  </div>
                ))}
              </div>
            ) : filteredGroups.length === 0 ? (
              <div className="text-center py-12">
                <div className="inline-block p-3 rounded-full bg-muted mb-4">
                  <Users className="h-6 w-6 text-muted-foreground" />
                </div>
                <h3 className="text-lg font-medium mb-2">
                  {t("No groups found")}
                </h3>
                <p className="text-muted-foreground mb-4">
                  {t(
                    "Try adjusting your search or filter settings, or create a new group."
                  )}
                </p>
                <Button
                  onClick={() => setIsCreateModalOpen(true)}
                  className="gap-1"
                >
                  <Plus className="h-4 w-4" />
                  {t("Create Group")}
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredGroups.map((group) => (
                  <GroupCard
                    key={group.id}
                    group={group}
                    onClick={() => handleOpenSettlement(group)}
                  />
                ))}
              </div>
            )}

            {/* Feature descriptions */}
            <div className="mt-12">
              <h2 className="text-2xl font-bold mb-6">
                {t("Group Expense Features")}
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card>
                  <CardHeader>
                    <div className="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mb-2">
                      <DollarSign className="h-5 w-5 text-blue-600" />
                    </div>
                    <CardTitle className="text-lg">
                      {t("Split Expenses Fairly")}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      {t(
                        "Use our equal split or custom amount features to ensure everyone contributes their fair share."
                      )}
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <div className="h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mb-2">
                      <Share2 className="h-5 w-5 text-green-600" />
                    </div>
                    <CardTitle className="text-lg">
                      {t("Share Settlement Links")}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      {t(
                        "Send payment requests directly through the app with our automated reminders."
                      )}
                    </p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center mb-2">
                      <MessageSquare className="h-5 w-5 text-purple-600" />
                    </div>
                    <CardTitle className="text-lg">
                      {t("Keep Everyone in the Loop")}
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-muted-foreground">
                      {t(
                        "Use the group chat feature to discuss expenses and keep communication transparent."
                      )}
                    </p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Modals */}
      <CreateGroupModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onCreateGroup={handleCreateGroup}
        availableUsers={[
          { id: "1", name: "John Doe", email: "john@example.com" },
          { id: "2", name: "Jane Smith", email: "jane@example.com" },
          { id: "3", name: "Bob Johnson", email: "bob@example.com" },
        ]}
      />

      <SettlementModal
        isOpen={isSettlementModalOpen}
        onClose={() => setIsSettlementModalOpen(false)}
        group={selectedGroup}
        onSettle={handleSettlePayment}
      />
    </div>
  );
};

export default Groups;